==WatirCukeFM

Watir  / Webdriver + Cucumber + Feature Manager

Rails (2.3.8) application which allows to managed cucumber features written in cucumber but run with browser interface and them throughout the web application in rails

Rails application and interface is cloned from https://github.com/cs3b/cucumber_fm/, and it has been extended with functionality of WatirCuke (https://github.com/gs/watircuke/)

== How to make it work?

1) Just clone the repo from "https://github.com/gs/watircukefm/"

2) install missing gems (geminstaller config/geminstaller.yml)

3) run server (./script/server)

4) go to your browser and type url: http://localhost:3000/documentation/features


Application is divided for 3 parts:

- Business overview - contains list of available features, can be group by, search by tag and create new feature

  - After clicking on feature user can edit, save, manage file, navigate and run test in chosen browser

  - Running test will open new tab where after test results will be shown (results are stored in "public/test_results" folder)

- Statistics - useful information about status of feature, estimation, state
  
- Results  - lists all test results, by clicking on its name user can view results or remove it if not needed


IMPORTANT:

- All features are stored in "features" folder (cucumber "http://cukes.info")

- "Dictionary" folder contains all implemented by default actions supported by watircuke - keep to that notation can improve your test implementation

- If you would prefer to write tests using TextMate, Redcar there is a folder TextMateBundles with bundles. Just drop them to your Bundles folder and have fun ;) 

- Currently I have extended TestWiseRecorder (http://testwisely.com/en/testwise/recorder) to support watircuke syntax (just install it - its firefox plugin) stored in "TestWiseRecorder" folder (version experimental)

- Application makes screenshost if some step will fail (not implemeted for linux yet.)

- Can check for missing translation - just goto config/config.yml file and enter regexp for translation_tag and set check_translation to true

- Application supports Fixtures/Language files. They have to be dropped into : 'features/fixtures' path. 
      
      They need to be in YML format like:     
      
      login.yml:
      
      login:
        login_button: Sign up 
       
        Then you need type in your feature:

     Background:
        Given I load "login" fixture
      
     And then in scenario to use its content:
 
      I click the ":login.login_button" button   


